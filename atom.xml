<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[We are Software Craftsmen]]></title>
  <link href="http://wearesoftwarecraftsmen.com/atom.xml" rel="self"/>
  <link href="http://wearesoftwarecraftsmen.com/"/>
  <updated>2013-04-05T08:43:33-04:00</updated>
  <id>http://wearesoftwarecraftsmen.com/</id>
  <author>
    <name><![CDATA[Andrew Smith]]></name>
    <email><![CDATA[andrew@wearesoftwarecraftsmen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Related Posts to Octopress on Windows]]></title>
    <link href="http://wearesoftwarecraftsmen.com/blog/2013/02/06/adding-related-posts-to-octopress-on-windows/"/>
    <updated>2013-02-06T11:34:00-05:00</updated>
    <id>http://wearesoftwarecraftsmen.com/blog/2013/02/06/adding-related-posts-to-octopress-on-windows</id>
    <content type="html"><![CDATA[<p>Although Jekyll already has the &#8220;related posts&#8221; feature baked in, utilizing rb-gsl can drastically speed up the site generation time by a magnitude of 10 times. However, installing the rb-gsl gem requires you to compile gsl from its source; which can be a little tricky on Windows. Throw in only a handful of helpful articles and you may find yourself frustrated trying to accomplish this. In this article, I detail the steps to get related posts up, running, and generating on your Windows machine via rb-gsl and gsl. <!-- More--></p>

<h2 id="create-a-template">Create a Template</h2>
<p>First, create a template for the related posts aside. I have created mine as follows <code>source/_includes/custom/asides/related_posts.html</code>. Below is my markup:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section&gt;</span>
</span><span class="line">    <span class="nt">&lt;h1&gt;</span>Related Posts<span class="nt">&lt;/h1&gt;</span>
</span><span class="line">    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;related_posts unstyled&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      {% for post in site.related_posts limit:5 %}
</span><span class="line">        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class="line">                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>
</span><span class="line">                <span class="nt">&lt;/li&gt;</span>
</span><span class="line">      {% endfor&quot; %}
</span><span class="line">    <span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I am limiting a maximum of 5 related posts to be shown at once. I then included this aside in my post layout. Previewing the site populates this with the most recent posts. For a better list of related posts, we need to enable lsi in Jekyll.</p>

<h2 id="jekyll-and-octopress-configuration">Jekyll and Octopress Configuration</h2>
<p>Open the <code>_config_yml</code> file and add the following line anywhere in the file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">lsi</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is all that is necessary. However, you may find that generating your blog now takes a very long time. This is because it is performing statistical analysis of your posts to determine which ones relate the best. To remedy this, we need to install gsl.</p>

<h2 id="get-the-ruby-devkit">Get the Ruby DevKit</h2>
<ol>
  <li>Download and unzip the <a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">Ruby DevKit</a> to <code>C:\Ruby193DevKit</code></li>
  <li>Open the command and use the following commands:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>C:<span class="se">\R</span>uby193DevKit
</span><span class="line">ruby dk.rb init
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Open the newly created <code>config.yml</code> and ensure your Ruby is listed in the file.</li>
  <li>Now issue the following commands:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ruby dk.rb install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="installing-gsl">Installing GSL</h2>
<ol>
  <li>Download <a href="http://ftpmirror.gnu.org/gsl/gsl-1.15.tar.gz">GSL 1.15</a></li>
  <li>Using something like 7zip, unzip/untar the download to <code>C:\gsl-1.15</code></li>
  <li>Open the following file: <code>C:\Ruby193DevKit\msys.bat</code>. This will open up a special command window.</li>
  <li>Issue the following commands (may take several minutes to complete):</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /C/gsl-1.15
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="installing-rb-gsl">Installing rb-gsl</h2>
<ol>
  <li>Download the <a href="https://github.com/romanbsd/rb-gsl/archive/master.zip">rb-gsl source</a> and unzip it to <code>C:\rb-gsl</code></li>
  <li>Next, using the same <code>msys.bat</code> command window, <code>cd</code> into the root of the rb-gsl directory and issue the following commands (as root):</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ruby setup.rb config
</span><span class="line">ruby setup.rb setup
</span><span class="line">ruby setup.rb install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion-and-a-note-on-usage">Conclusion and a Note on Usage</h2>
<p>You now have successfully installed the gsl library, rb-gsl gem and enabled the related posts functionality in Jekyll. It is worth noting that in order to generate your site with rb-gsl you need to use the <code>C:\Ruby193DevKit\msys.bat</code> command prompt. I have not had success doing so by simply using PowerShell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rake in .NET Projects]]></title>
    <link href="http://wearesoftwarecraftsmen.com/blog/2013/02/03/using-rake-in-net-projects/"/>
    <updated>2013-02-03T16:36:00-05:00</updated>
    <id>http://wearesoftwarecraftsmen.com/blog/2013/02/03/using-rake-in-net-projects</id>
    <content type="html"><![CDATA[<p>This article will demonstrate how I have utilized Ruby <a href="http://rake.rubyforge.org/">Rake</a>, the <a href="https://github.com/derickbailey/Albacore">Albacore</a> task library, and a few other Ruby gems for build automation in my .NET projects. Hopefully this will be a good source to help those wishing to do the same. Keep in mind that this is not a beginner&#8217;s guide and assumes you are already somewhat familiar with Rake. For those that prefer a more &#8220;hands-on&#8221; approach, the <strong><a href="https://gitlab.wearesoftwarecraftsmen.com/public">source code</a></strong> for this article can be found with my other <a href="https://gitlab.wearesoftwarecraftsmen.com/public">public projects</a>. <!--More--> </p>

<h2 id="the-goals">The Goals</h2>
<p>Before writing any Ruby, it&#8217;s important to determine exactly what it is you are trying to automate with Rake. This will serve as a guide in what and how you write your Rake tasks. I set out with the following goals in mind:</p>

<ul>
  <li>Compile the .NET project</li>
  <li>Run all <a href="http://wearesoftwarecraftsmen.com/blog/2013/01/19/getting-started-with-mspec-machine-dot-specifications/">Mspec test specifications</a> for  project
    <ul>
      <li>Fail the build if any test specifications do not pass</li>
    </ul>
  </li>
  <li>Generate AssemblyInfo.cs files with project information and version number
    <ul>
      <li>Include the commit sha with the version information in the AssemblyInfo.cs file</li>
    </ul>
  </li>
  <li>Pull current version from git source control</li>
  <li>Be able to increment a major and minor version for a build</li>
  <li>Output all project <abbr title="Dynamic Link Library">DLL</abbr>s <strong>not</strong> associated with specification tests to build and release output folders</li>
  <li>Be able to optionally merge all project <abbr title="Dynamic Link Library">DLL</abbr>s <strong>not</strong> associated with specification tests into one <abbr title="Dynamic Link Library">DLL</abbr> for distribution</li>
  <li>Optionally be able to tag the current version in git from the build</li>
</ul>

<h2 id="include-our-gems">Include our Gems</h2>
<p>We will want to include our gems and any Ruby file in the <code>build_tools</code> folder:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s2">&quot;rake&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;albacore&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;fileutils&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;grit&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;configatron&quot;</span>
</span><span class="line"><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;./build_tools/*rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">include_file</span><span class="o">|</span>
</span><span class="line">	<span class="nb">require</span> <span class="n">include_file</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="preparing-the-build">Preparing the Build</h2>
<p>Next, the build script needs to define some common properties and clean up the solution from any previous build. To facilitate cleaning the build, I have created a Rake namespace called <code>:setup</code>. In this namespace I have three tasks for now; one to remove any build-created directories, one to re-create any directories needed by the build, and, finally, one to call that completes all setup tasks (there will be a few more shortly).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">base_dir</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="n">build_tools_dir</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_dir</span><span class="si">}</span><span class="s2">/build_tools&quot;</span>
</span><span class="line"><span class="n">build_dir</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_dir</span><span class="si">}</span><span class="s2">/build&quot;</span>
</span><span class="line"><span class="n">namespace</span> <span class="ss">:setup</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">	<span class="n">desc</span> <span class="s2">&quot;Cleans up and removes build related artifacts.&quot;</span>
</span><span class="line">	<span class="n">task</span> <span class="ss">:clean</span> <span class="k">do</span>
</span><span class="line">		<span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span> <span class="n">build_dir</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	
</span><span class="line">	<span class="n">desc</span> <span class="s2">&quot;Initializes directories&quot;</span>
</span><span class="line">	<span class="n">task</span> <span class="ss">:init_directories</span> <span class="o">=&gt;</span> <span class="ss">:clean</span> <span class="k">do</span>
</span><span class="line">		<span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir</span> <span class="n">build_dir</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	
</span><span class="line">	<span class="n">desc</span> <span class="s2">&quot;Prepares files/folders/etc. for a new build.&quot;</span>
</span><span class="line">	<span class="n">task</span> <span class="ss">:init</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:init_directories</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="compiling-the-project">Compiling the Project</h2>
<p>For the compilation task, I used <a href="https://github.com/derickbailey/Albacore">Albacore</a>&#8217;s <code>msbuild</code> task.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Compiles the project.&quot;</span>
</span><span class="line"><span class="n">msbuild</span> <span class="ss">:compile</span> <span class="o">=&gt;</span> <span class="s2">&quot;setup:init&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">msb</span><span class="o">|</span>
</span><span class="line">	<span class="n">msb</span><span class="o">.</span><span class="n">command</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">build_tools_dir</span><span class="si">}</span><span class="s2">/msbuild/msbuild.exe&quot;</span>
</span><span class="line">	<span class="n">msb</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:configuration</span> <span class="o">=&gt;</span> <span class="ss">:Release</span><span class="p">}</span>
</span><span class="line">	<span class="n">msb</span><span class="o">.</span><span class="n">targets</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:Clean</span><span class="p">,</span> <span class="ss">:Build</span><span class="o">]</span>
</span><span class="line">	<span class="n">msb</span><span class="o">.</span><span class="n">nologo</span>
</span><span class="line">	<span class="n">msb</span><span class="o">.</span><span class="n">solution</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">target_solution_file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I have stored my target solution file in an external configuration file and used the <a href="https://github.com/markbates/configatron">configatron</a> gem to make it available. In order to do this, I have created a <code>build_configuration.settings</code> file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">configatron</span><span class="o">.</span><span class="n">configure_from_hash</span> <span class="ss">:settings</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">	<span class="ss">:target_solution_file</span> <span class="o">=&gt;</span> <span class="s2">&quot;DomainFramework.sln&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">:title</span><span class="o">=&gt;</span> <span class="s2">&quot;Domain Framework&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">:description</span><span class="o">=&gt;</span> <span class="s2">&quot;Framework to facilitate domain-oriented development in .NET.&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">:company</span><span class="o">=&gt;</span> <span class="s2">&quot;We are Software Craftsmen&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">:product</span><span class="o">=&gt;</span> <span class="s2">&quot;Domain Framework&quot;</span><span class="p">,</span>
</span><span class="line">	<span class="ss">:copyright</span> <span class="o">=&gt;</span> <span class="s2">&quot;We are Software Craftsmen &amp; Andrew Smith 2013&quot;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice that this is simply a Ruby file with a different file extension. I then load this file in the beginning with my other common variable declarations at the top; giving me:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">load</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_dir</span><span class="si">}</span><span class="s2">/build_configuration.settings&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>msbuild</code> task uses the default location of the MSBuild executable. However, there is a chance the build machine does not have MSBuild in the correct location or even installed. In order to make the build self-contained, I have explicitly configured the task&#8217;s command location to use the MSBuild.exe located in my build_tools directory. The MSBuild executable can be copied from the following locations:</p>

<p>64-bit <code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe</code></p>

<p>32-bit <code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe</code></p>

<h2 id="execute-mspec-specification-tests">Execute MSpec Specification Tests</h2>
<p>Utilizing the specialized <code>mspec</code> <a href="https://github.com/derickbailey/Albacore">Albacore</a> task makes this easy:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Executes all Mspec specifications.&quot;</span>
</span><span class="line"><span class="n">mspec</span> <span class="ss">:test</span> <span class="o">=&gt;</span> <span class="ss">:compile</span> <span class="k">do</span> <span class="o">|</span><span class="n">mspec</span><span class="o">|</span>
</span><span class="line">	<span class="n">spec_dlls</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;**/*.Specs.dll&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="n">spec_dlls</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class="line">		<span class="n">mspec</span><span class="o">.</span><span class="n">command</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">build_tools_dir</span><span class="si">}</span><span class="s2">/mspec/mspec-clr4.exe&quot;</span>
</span><span class="line">		<span class="n">mspec</span><span class="o">.</span><span class="n">assemblies</span> <span class="o">=</span> <span class="n">spec_dlls</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I have the convention that all my Mspec assemblies will end with <code>.Specs.dll</code>, so the first thing it does is scan the project for any <abbr title="Dynamic Link Library">DLL</abbr>s that match that pattern. If it finds any, then it executes the mspec command. Notice that I am specifying the Mspec executable as being located in my <code>build_tools/mspec</code> folder. You will need to build Mspec from its <a href="https://github.com/machine/machine.specifications">source</a> and add the built executable and assemblies to this folder.</p>

<h2 id="versioning">Versioning</h2>
<p>To manage the versioning, I created a Ruby class, <code>Version</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Version</span>
</span><span class="line">	<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
</span><span class="line">		<span class="vi">@repo</span> <span class="o">=</span> <span class="n">repo</span>
</span><span class="line">		<span class="vi">@already_incremented</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">		<span class="vi">@major_version</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">		<span class="vi">@minor_version</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">		<span class="vi">@commit_id</span> <span class="o">=</span> <span class="vi">@repo</span><span class="o">.</span><span class="n">commits</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">id</span>
</span><span class="line">		<span class="n">latest_tag</span> <span class="o">=</span> <span class="vi">@repo</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="sr">/^v/</span> <span class="o">=~</span> <span class="n">tag</span><span class="o">.</span><span class="n">name</span><span class="p">}</span><span class="o">.</span><span class="n">sort_by!</span> <span class="p">{</span><span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="n">tag</span><span class="o">.</span><span class="n">commit</span><span class="o">.</span><span class="n">authored_date</span> <span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class="line">		<span class="k">if</span> <span class="o">!</span><span class="n">latest_tag</span><span class="o">.</span><span class="n">nil?</span> <span class="k">then</span>
</span><span class="line">			<span class="nb">puts</span> <span class="n">latest_tag</span><span class="o">.</span><span class="n">name</span>
</span><span class="line">			<span class="n">version_parts</span> <span class="o">=</span> <span class="n">latest_tag</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/^v/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="vi">@major_version</span> <span class="o">=</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">version_parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">			<span class="vi">@minor_version</span> <span class="o">=</span> <span class="nb">Integer</span><span class="p">(</span><span class="n">version_parts</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">increment_version</span><span class="p">(</span><span class="n">release_type</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="o">!</span><span class="vi">@already_incremented</span> <span class="k">then</span>
</span><span class="line">			<span class="vi">@already_incremented</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">			<span class="k">if</span> <span class="n">release_type</span> <span class="o">==</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">major</span> <span class="k">then</span>
</span><span class="line">				<span class="n">increment_major</span>
</span><span class="line">			<span class="k">elsif</span> <span class="n">release_type</span> <span class="o">==</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">minor</span>
</span><span class="line">				<span class="n">increment_minor</span>
</span><span class="line">			<span class="k">end</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">		<span class="kp">throw</span> <span class="ss">:alreadyIncremented</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">toString</span><span class="p">(</span><span class="n">with_commit_id</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="n">with_commit_id</span> <span class="k">then</span>
</span><span class="line">			<span class="k">return</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@major_version</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="vi">@minor_version</span><span class="si">}#{</span><span class="vi">@commit_id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">		<span class="k">return</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@major_version</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="vi">@minor_version</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="kp">private</span>
</span><span class="line">	<span class="k">def</span> <span class="nf">increment_major</span>
</span><span class="line">		<span class="vi">@minor_version</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">		<span class="vi">@major_version</span> <span class="o">=</span> <span class="vi">@major_version</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">increment_minor</span>
</span><span class="line">		<span class="vi">@minor_version</span> <span class="o">=</span> <span class="vi">@minor_version</span> <span class="o">+</span> <span class="mi">1</span>	
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It accepts a <a href="https://github.com/mojombo/grit">grit</a> repository object and defaults to version 0.1 (major.minor). From the repo object, it then pulls a sorted collection of tags and grabs the most recent tag matching the name <code>v*.*</code>; so for example <code>v0.1</code>. It then takes this tag and splits it into the major and minor version.</p>

<p>There is also a <code>toString</code> method for formatting the version in the format major.minor; with the optional setting to include the git commit sha at the end for major.minor.sha. Finally, we have an <code>increment_version</code> method that will increment the version based appropriately on the release type of major, minor, or ci. I did not want to use a magic string for the release type, so I also created another Ruby class to manage this; <code>ReleaseType</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ReleaseType</span>
</span><span class="line">	<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class="line">		<span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="vc">@@major</span> <span class="o">=</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;major&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="vc">@@minor</span> <span class="o">=</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;minor&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="vc">@@ci</span> <span class="o">=</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;ci&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">type</span>
</span><span class="line">		<span class="k">return</span> <span class="vi">@type</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">release_type</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="n">release_type</span> <span class="o">==</span> <span class="s2">&quot;major&quot;</span> <span class="k">then</span>
</span><span class="line">			<span class="k">return</span> <span class="vc">@@major</span>
</span><span class="line">		<span class="k">elsif</span> <span class="n">release_type</span> <span class="o">==</span> <span class="s2">&quot;minor&quot;</span>
</span><span class="line">			<span class="k">return</span> <span class="vc">@@minor</span>
</span><span class="line">		<span class="k">elsif</span> <span class="n">release_type</span> <span class="o">==</span> <span class="s2">&quot;ci&quot;</span>
</span><span class="line">			<span class="k">return</span> <span class="vc">@@ci</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">		<span class="k">return</span> <span class="vc">@@ci</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">major</span>
</span><span class="line">		<span class="k">return</span> <span class="vc">@@major</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">minor</span>
</span><span class="line">		<span class="k">return</span> <span class="vc">@@minor</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">ci</span>
</span><span class="line">		<span class="k">return</span> <span class="vc">@@ci</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This class defines a string property for the type&#8217;s name and then three class properties for each of the release types; major, minor, and ci. It also has a class method to return a release type based on a passed string. With this, we need to add a few more common properties to our rakefile as seen below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#...</span>
</span><span class="line">
</span><span class="line"><span class="n">release_type_input</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;release_type&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;ci&quot;</span>
</span><span class="line"><span class="n">release_type</span> <span class="o">=</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="n">release_type_input</span><span class="p">)</span>
</span><span class="line"><span class="n">repo</span> <span class="o">=</span> <span class="ss">Grit</span><span class="p">:</span><span class="ss">:Repo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">base_dir</span><span class="p">)</span>
</span><span class="line"><span class="n">version</span> <span class="o">=</span> <span class="no">Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice that I am using the <a href="https://github.com/mojombo/grit">grit</a> Ruby gem and creating one stating that our project root is the git repository.</p>

<h2 id="updating-the-assemblyinfocs-with-our-version">Updating the AssemblyInfo.cs with our Version</h2>
<p>We may have a mechanism in place for maintaining our version, but currently we are not actually using this version number anywhere. What we would like is for the build to automatically generate any required <code>AssemblyInfo.cs</code> with our information and version upon being built. I have added a few tasks in the <code>setup</code> namespace and modified our <code>init</code> task to utilize them:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Updates assembly info files.&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:update_assemblies</span> <span class="k">do</span>
</span><span class="line">	<span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;*/Properties/&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">folder</span><span class="o">|</span>
</span><span class="line">		<span class="p">(</span><span class="n">assemblyinfo</span> <span class="n">folder</span> <span class="k">do</span> <span class="o">|</span><span class="n">asm</span><span class="o">|</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="n">version</span><span class="o">.</span><span class="n">toString</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">company_name</span> <span class="o">=</span> <span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">company_name</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">product_name</span> <span class="o">=</span> <span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">product</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">title</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">description</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">copyright</span> <span class="o">=</span> <span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">copyright</span>
</span><span class="line">			<span class="n">asm</span><span class="o">.</span><span class="n">output_file</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">folder</span><span class="si">}</span><span class="s2">/AssemblyInfo.cs&quot;</span>
</span><span class="line">		<span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="n">invoke</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">desc</span> <span class="s2">&quot;Increments version&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:increment_version</span> <span class="k">do</span>
</span><span class="line">	<span class="n">version</span><span class="o">.</span><span class="n">increment_version</span><span class="p">(</span><span class="n">release_type</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1">#...</span>
</span><span class="line">
</span><span class="line"><span class="n">desc</span> <span class="s2">&quot;Prepares files/folders/etc. for a new build.&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:init</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:init_directories</span><span class="p">,</span> <span class="ss">:increment_version</span><span class="p">,</span> <span class="ss">:update_assemblies</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice that an <code>AssemblyInfo.cs</code> file is created in every <code>Properties</code> folder two levels below the root; first level being the <code>csproj</code>/<code>vbproj</code> folder and the second being its contained <code>Properties</code> folder. I am using the <code>assemblyinfo</code> <a href="https://github.com/derickbailey/Albacore">Albacore</a> task and my data is being set from my configuration file.</p>

<h2 id="build-output">Build Output</h2>
<p>Currently the <code>msbuild</code> task is building all our projects in place and not outputing the assemblies anywhere useful. We remedy this by creating another task responsible for moving all the built Release assemblies. These assemblies will be copied to a temporary folder to be processed further by the build script. We do not, however, want to copy any test releated assemblies or dependent assemblies. To faciliate this, I have added a <code>project_folders</code> property at the top of the rakefile that contains only project folders not affiliated with testing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rejectFolders</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;build&quot;</span><span class="p">,</span> <span class="s2">&quot;release&quot;</span><span class="p">,</span> <span class="s2">&quot;build_tools&quot;</span><span class="p">,</span> <span class="s2">&quot;packages&quot;</span><span class="o">]</span>
</span><span class="line"><span class="n">project_folders</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_dir</span><span class="si">}</span><span class="s2">/*&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span><span class="p">{</span><span class="o">|</span><span class="n">folder</span><span class="o">|</span>
</span><span class="line">					<span class="n">rejectFolders</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">						<span class="sr">/.*</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="sr">/</span> <span class="o">=~</span> <span class="n">folder</span>
</span><span class="line">					<span class="p">}</span> <span class="o">||</span>
</span><span class="line">					<span class="sr">/.*Specs.*/</span> <span class="o">=~</span> <span class="n">folder</span> <span class="o">||</span>
</span><span class="line">					<span class="o">!</span><span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span>
</span><span class="line">				<span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">#...</span>
</span><span class="line">
</span><span class="line"><span class="n">desc</span> <span class="s2">&quot;Copies project output to build folder.&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:build_output</span> <span class="o">=&gt;</span> <span class="s2">&quot;setup:init_directories&quot;</span> <span class="k">do</span>
</span><span class="line">	<span class="n">project_folders</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">folder</span><span class="o">|</span>
</span><span class="line">	 	<span class="no">FileUtils</span><span class="o">.</span><span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">folder</span><span class="si">}</span><span class="s2">/bin/Release/.&quot;</span><span class="p">,</span> <span class="n">build_dir</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I also create a new namespace, <code>release</code>, and add tasks for preparing for the build&#8217;s output.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">namespace</span> <span class="ss">:release</span> <span class="k">do</span>
</span><span class="line">	<span class="n">desc</span> <span class="s2">&quot;Cleans for new release.&quot;</span>
</span><span class="line">	<span class="n">task</span> <span class="ss">:clean</span> <span class="k">do</span>
</span><span class="line">		<span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span> <span class="n">release_dir</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="n">task</span> <span class="ss">:init</span> <span class="o">=&gt;</span> <span class="ss">:clean</span> <span class="k">do</span>
</span><span class="line">		<span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir</span> <span class="n">release_dir</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, I add a task to the <code>release</code> namespace to copy all assemblies from the temporary build folder into a release folder. This will be used when no merging of assemblies is required:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Output the build&amp;#8217;s release output.&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:output</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:test</span><span class="p">,</span> <span class="ss">:build_output</span><span class="p">,</span> <span class="ss">:init</span><span class="o">]</span> <span class="k">do</span>
</span><span class="line">	<span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">build_dir</span><span class="si">}</span><span class="s2">/*.dll&quot;</span><span class="p">),</span> <span class="n">release_dir</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="merging-assemblies">Merging Assemblies</h2>
<p>In the case we want to merge all our assemblies into one to be output, we can use a tool called IL Merge. IL Merge is a tool which takes multiple .NET assemblies and combines them into one assembly <abbr title="Dynamic Link Library">DLL</abbr>. The ILMerge installer can be downloaded from <a href="http://www.microsoft.com/en-us/download/details.aspx?id=17630">Microsoft</a>. Once installed, you will need locate the ILMerge.exe file and add it to your <code>build_tools</code> directory.</p>

<p>I have added a task, <code>merge_and_output</code>, to the <code>release</code> namespace that utilizes the <code>ilmerge</code> <a href="https://github.com/derickbailey/Albacore">Albacore</a> task.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Merge built assemblies.&quot;</span>
</span><span class="line"><span class="n">ilmerge</span> <span class="ss">:merge_and_output</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:test</span><span class="p">,</span> <span class="ss">:build_output</span><span class="p">,</span><span class="ss">:init</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">cfg</span><span class="o">|</span>
</span><span class="line">	<span class="n">assemblies</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">build_dir</span><span class="si">}</span><span class="s2">/*.dll&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="n">cfg</span><span class="o">.</span><span class="n">command</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">build_tools_dir</span><span class="si">}</span><span class="s2">/ilmerge/ILMerge.exe&quot;</span>
</span><span class="line">	<span class="n">cfg</span><span class="o">.</span><span class="n">assemblies</span> <span class="n">assemblies</span>
</span><span class="line">	<span class="n">cfg</span><span class="o">.</span><span class="n">output</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">release_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">configatron</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">.Release.dll&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Because only non-test releated assemblies have been copied to the build output folder, we can simply take every assembly in the folder and merge them together. I am outputing the merged assembly to the release directory.</p>

<h2 id="tagging-our-version-in-git">Tagging our Version in Git</h2>
<p>The last task I need to create is one to tag a release in git. I created a <code>ReleaseManager</code> class to handle this functionality. It contains a single class level method that creates a tag based on the version and release type.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ReleaseManager</span>
</span><span class="line">	<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">tag_release</span><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">release_type</span><span class="p">)</span>
</span><span class="line">		<span class="nb">exec</span> <span class="s2">&quot;git tag -a </span><span class="se">\&quot;</span><span class="s2">v</span><span class="si">#{</span><span class="n">version</span><span class="o">.</span><span class="n">toString</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2"> -m </span><span class="se">\&quot;</span><span class="s2">Tagged for </span><span class="si">#{</span><span class="n">release_type</span><span class="o">.</span><span class="n">type</span><span class="si">}</span><span class="s2">: v</span><span class="si">#{</span><span class="n">version</span><span class="o">.</span><span class="n">toString</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I then use this class in my final rake task located in the release namespace. If the release type is not a minor or major release, an error is thrown.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">desc</span> <span class="s2">&quot;Tags current version.&quot;</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:tag_release</span> <span class="o">=&gt;</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">	<span class="k">if</span> <span class="n">release_type</span> <span class="o">!=</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">minor</span> <span class="o">||</span> <span class="n">release_type</span> <span class="o">!=</span> <span class="no">ReleaseType</span><span class="o">.</span><span class="n">major</span> <span class="k">then</span>
</span><span class="line">		<span class="kp">throw</span> <span class="ss">:releaseTypeNotSupported</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	<span class="no">ReleaseManager</span><span class="o">.</span><span class="n">tag_release</span><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">release_type</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, I add my default rake task to simply build the project and release its output without merging or tagging.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s2">&quot;release:output&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>
<p>Using Ruby Rake we have successfully written a build automation script that can be used with most .NET projects; configurable by an external settings file. Of course, the full source can be pull via git from my <a href="https://gitlab.wearesoftwarecraftsmen.com/public">public repositories</a>. Feel free to leave your comments and questions. As always, remember that we all are software craftsmen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Software Craftsmanship]]></title>
    <link href="http://wearesoftwarecraftsmen.com/blog/2013/01/28/on-software-craftsmanship/"/>
    <updated>2013-01-28T11:30:00-05:00</updated>
    <id>http://wearesoftwarecraftsmen.com/blog/2013/01/28/on-software-craftsmanship</id>
    <content type="html"><![CDATA[<p>I consider myself a software craftsman. So in reading the article <a href="http://www.javaworld.com/community/?q=node/8649" title="On the Dark Side of Craftsmanship">On the Dark Side of &#8220;Craftsmanship&#8221;</a>, one may assume that I was upset at this article&#8217;s summary of what software craftsmanship truly entails. I was not. In fact, I not only agree with the tone and some of the points in the article, but have experienced some of these exact same things. I tend to feel that the meaning of software craftsmanship is not only misunderstood by &#8220;software laborers,&#8221; but by software craftsmen as well. This is my attempt to better define the driving motivation behind craftsmanship. <!--More--></p>

<h2 id="we-are-all-software-craftsmen">We are All Software Craftsmen</h2>
<p><span class="pullquote-right" data-pullquote="Software craftsmanship is about improving oneself and ones craft">
In my opinion, software craftsmanship is not about great code. It is not about being better than others. It is not about staying
late or coming in early and is certainly not about ridiculing others for their work. Software craftsmanship is about
improving oneself and ones craft; a constant pursuit of improvement and the realization that there will always be
room for more improvement to come. Take pride in your work. If you accomplish some feat of elegant code and solution,
 pat yourself on the back; but never do so for long. Finishing something worthwhile is only the beginning of starting
  its improvement.
</span></p>

<p><span class="pullquote-left" data-pullquote="craftsmanship means helping others achieve">
In this sense, we are <strong>all</strong> software craftsmen. No one is left out or left behind. No one is omitted from the need for improvement. We all have room for growth and there is no need to criticize another. Promoting craftsmanship means helping others achieve and destructive behavior or comments have no positive benefit. As mentioned in the article, <a href="http://harthur.wordpress.com/2013/01/24/771/">Heather Arthur was ridiculed</a> for code released to the community. How does this help Heather become a better developer or help improve quality? How does this help those commenting become better developers? Simply put: it does not.
</span></p>

<p>No one lacks the need for improvement; learn from one another regardless of years of experience or rank.</p>

<p><strong>We are not experts. We are software craftsmen and we are all in this
together.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Started with MSpec]]></title>
    <link href="http://wearesoftwarecraftsmen.com/blog/2013/01/19/getting-started-with-mspec-machine-dot-specifications/"/>
    <updated>2013-01-19T08:32:00-05:00</updated>
    <id>http://wearesoftwarecraftsmen.com/blog/2013/01/19/getting-started-with-mspec-machine-dot-specifications</id>
    <content type="html"><![CDATA[<p>This tutorial will help you get started using Machine.Specifications, otherwise known as MSpec,
for writing your <abbr title="Behavioral driven development">BDD</abbr> style unit tests, called specifications. In this tutorial we will go over the basic syntax of using MSpec, author some simple specifications, as well as setup ReSharper to run and output the results. <!--More--></p>

<h2 id="get-the-source">Get the Source</h2>
<p>To facilitate setting up ReSharper to run MSpec specifications, we need to grab the latest source from github.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git clone git://github.com/machine/machine.specifications.git mspec
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="setting-up-resharper">Setting up ReSharper</h2>
<p>Next, we need to build the source code. This can easily be done with the following command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>mspec
</span><span class="line">build-release.cmd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This changes your current directory and then runs the file build-release.cmd; including running MSpec&#8217;s own specifications and
then building the solution under release mode. The build&#8217;s output files can be found in <code>mspec/Build/Release</code>. In this
directory, you will find files for ReSharper in the format of <code>InstallReSharperRunner.*.*.bat</code> where <code>*.*</code> is the
version of your ReSharper. Simply run the <code>.bat</code> file that corresponds to your ReSharper version. You ReSharper can
now run MSpec specifications! Now let&#8217;s create a specification to see it in action.</p>

<h2 id="before-we-get-started">Before we get Started</h2>
<p>It is important to note where these specifications we are about to write are going to live. Do they go in a
class library project? Or is there a special project type; Test Project anyone? Well, when using MSpec,
your specifications are just special classes in a normal class library project. Typically,
I have a class library dedicated to specifications only. It is typically a <strong>bad practice</strong> to place the
tests for a feature in the class library containing that feature.</p>

<p>Although the class library containing your specifications is simply a class library project, it does, however,
require the MSpec DLLs. You can either use <a href="http://nuget.org/">nuget</a> or you can grab the DLLs from the source we
just compiled.</p>

<h2 id="writing-your-first-specification">Writing your First Specification</h2>
<p>Unlike traditional unit tests&#8217; style of Arrange-Act-Assert, specifications are typically Given-When-Then or
Establish context-Because of-It should). You will be declaring the <em>Subject</em> of your specification,
<em>Establish</em> the context in which the specification applies, <em>Because</em> an action occurs, <em>It</em> should do something.</p>

<p>With this said, you will want to pay particular attention to the <strong>Subject</strong>, <strong>Establish</strong>, <strong>Because</strong>, and <strong>It</strong> in the example below. The following code is a specification for concatentating two strings.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="na">[Subject(typeof(StringUtilties))]</span>
</span><span class="line"><span class="k">public</span> <span class="k">class</span> <span class="nc">when_concatenating_two_strings</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="n">StringUtilities</span> <span class="n">sut</span><span class="p">;</span>
</span><span class="line">    <span class="k">static</span> <span class="kt">string</span> <span class="n">input1</span><span class="p">;</span>
</span><span class="line">    <span class="k">static</span> <span class="kt">string</span> <span class="n">input2</span><span class="p">;</span>
</span><span class="line">    <span class="k">static</span> <span class="kt">string</span> <span class="n">actualValue</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">Establish</span> <span class="n">that</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringUtilities</span><span class="p">();</span>
</span><span class="line">        <span class="n">input1</span> <span class="p">=</span> <span class="s">&quot;Hello &quot;</span><span class="p">;</span>
</span><span class="line">        <span class="n">input2</span> <span class="p">=</span> <span class="s">&quot;World!&quot;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">Because</span> <span class="n">of</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span><span class="line">        <span class="n">actualValue</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Concatenate</span><span class="p">(</span><span class="n">input1</span><span class="p">,</span> <span class="n">input2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">It</span> <span class="n">should_concatenate_both_input_strings</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span><span class="line">        <span class="n">actualValue</span><span class="p">.</span><span class="n">ShouldEqual</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And this is the <abbr title="Subject under test">SUT</abbr> class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="csharp"><span class="line"><span class="k">public</span> <span class="k">class</span> <span class="nc">StringUtilities</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Concatenate</span><span class="p">(</span><span class="kt">string</span> <span class="n">input1</span><span class="p">,</span> <span class="kt">string</span> <span class="n">input2</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">input1</span> <span class="p">+</span> <span class="n">input2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="running-your-specifications">Running Your Specifications</h2>
<p class="clearfix">
<img class="img-polaroid pull-right" src="http://wearesoftwarecraftsmen.com/images/posts/2013-01-19-getting-started-with-mspec-machine-dot-specifications/run-unit-tests-resharper-right-click-menu_resized.png" /> Having setup ReSharper with MSpec, the easiest way is to right-click on the specifications project and click &#8220;Run Unit Tests&#8221; as seen in the screenshot here:
</p>

<p class="clearfix">
Running your unit tests will open the Unit Tests Session window. From here you can run all or any subset of your unit tests. Note that you may add tests from other files to the current testing session. This allows you to configure your session to only run the tests you want; you are not boxed into an all or nothing testing scenario.
<img class="im-polaroid pull-left" src="http://wearesoftwarecraftsmen.com/images/posts/2013-01-19-getting-started-with-mspec-machine-dot-specifications/unit-test-sessions.png" />
</p>

<p class="clearfix">
ReSharper has much more to offer for unit testing than just this. Checking out the ReSharper menu item reveals quite a bit of additional functionality.
<img class="im-polaroid pull-right" src="http://wearesoftwarecraftsmen.com/images/posts/2013-01-19-getting-started-with-mspec-machine-dot-specifications/resharper-unit-tests-menu_resized.png" />
</p>

<h2 id="wrapping-it-up">Wrapping it Up</h2>
<p>Hopefully, you now have a basic understanding of getting your MSpec specifications up and running. Next time, I will go over creating ReSharper file and live templates; helping you write specifications even faster and more effectively. As always, remember that we are all software craftsmen and we should always strive for improvement; both professionally and personally. Thanks for stopping by.</p>
]]></content>
  </entry>
  
</feed>
